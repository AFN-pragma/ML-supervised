import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import PolynomialFeatures



data = pd.read_csv('5G_energy_consumption_dataset.csv')
data
(data.head())
(data.info())
(data.describe())
(data.shape)
(data.isnull().sum())
#ENCODE CATEGORICAL FEATURES

Le = LabelEncoder()
data['BS'] = Le.fit_transform(data['BS'])
data
#SELECT YOUR TARGET VARIABLE & THE FEATURE

x = data.drop(['Energy', 'Time'], axis = 1)
x
y = data['Energy']
y
#Split your dataset to training and test sets

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state= 20)
#Based on your data exploration phase select a ML regression algorithm and train it on the training set

model = LinearRegression()
model.fit(x_train, y_train)
predicted = model.predict(x_test)
#Assess your model performance on the test set using relevant evaluation metrics

("R squared", metrics.r2_score(y_test,predicted))
("RMSE", metrics.root_mean_squared_error(y_test,predicted))


Le = LabelEncoder()
data['BS'] = Le.fit_transform(data['BS'])
data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state= 20)

pr = PolynomialFeatures(degree = 2)
X_poly = pr.fit_transform(x)
lr_2 = LinearRegression()
lr_2.fit(X_poly, y)
predit = lr_2.predict(X_poly)
("R squared", metrics.r2_score(y_test,predicted))
